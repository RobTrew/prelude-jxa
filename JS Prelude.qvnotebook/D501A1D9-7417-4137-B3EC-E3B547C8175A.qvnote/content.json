{
  "title": "pureT",
  "cells": [
    {
      "type": "code",
      "language": "javascript",
      "data": "// pureT :: String -> f a -> (a -> f a)\nconst pureT = t =>\n    // Given a type name string, returns a \n    // specialised 'pure', where\n    // 'pure' lifts a value into a particular functor.\n    x => 'List' !== t ? (\n        'Either' === t ? (\n            pureLR(x)\n        ) : 'Maybe' === t ? (\n            pureMay(x)\n        ) : 'Node' === t ? (\n            pureTree(x)\n        ) : 'Tuple' === t ? (\n            pureTuple(x)\n        ) : pureList(x)\n    ) : pureList(x);"
    }
  ]
}
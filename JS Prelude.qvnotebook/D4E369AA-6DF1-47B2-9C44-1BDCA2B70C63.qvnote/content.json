{
  "title": "zip",
  "cells": [
    {
      "type": "code",
      "language": "javascript",
      "data": "// zip :: [a] -> [b] -> [(a, b)]\nconst zip = xs =>\n    // Use of `take` and `length` here allows for zipping with non-finite\n    // lists - i.e. generators like cycle, repeat, iterate.\n    ys => (([xs_, ys_]) => {\n        const\n            n = Math.min(...[xs_, ys_].map(length)),\n            vs = take(n)(ys_);\n        return take(n)(xs_).map(\n            (x, i) => Tuple(x)(vs[i])\n        );\n    })([xs, ys].map(list));"
    }
  ]
}
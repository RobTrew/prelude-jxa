{
  "title": "zip",
  "cells": [
    {
      "type": "code",
      "language": "javascript",
      "data": "// zip :: [a] -> [b] -> [(a, b)]\nconst zip = xs => ys =>\n    // Use of `take` and `length` here allows for \n    // zipping with non-finite lists - i.e. generators \n    // like cycle, repeat, iterate.\n    Array.from({\n        length: Math.min(xs.length, ys.length)\n    }, (_, i) => Tuple(xs[i])(ys[i]));"
    }
  ]
}
{
  "title": "splitBy",
  "cells": [
    {
      "type": "code",
      "language": "javascript",
      "data": "// Splitting not on a delimiter, but wherever the relationship\n// between consecutive terms matches a binary predicate"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "// splitBy :: (a -> a -> Bool) -> [a] -> [[a]]\n// splitBy :: (String -> String -> Bool) -> String -> [String]\nconst splitBy = (p, xs) =>\n    (xs.length < 2) ? [xs] : (() => {\n        const\n            bln = 'string' === typeof xs,\n            ys = bln ? xs.split('') : xs,\n            h = ys[0],\n            parts = ys.slice(1)\n            .reduce(([acc, active, prev], x) =>\n                p(prev, x) ? (\n                    [acc.concat([active]), [x], x]\n                ) : [acc, active.concat(x), x], [\n                    [],\n                    [h],\n                    h\n                ]);\n        return (bln ? (\n            ps => ps.map(cs => ''.concat.apply('', cs))\n        ) : x => x)(parts[0].concat([parts[1]]));\n    })();"
    }
  ]
}
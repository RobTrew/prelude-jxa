{
  "title": "treeFromNestedDict",
  "cells": [
    {
      "type": "code",
      "language": "javascript",
      "data": "// treeFromNestedDict -> Dict -> Either String Tree Dict\nconst treeFromNestedDict = dict => {\n    // A generic Tree structure from a dict\n    // with keys assumed to include no more than\n    // one key to a *list* value,\n    // with this pattern applied recursively\n    // to each child dictionary in such a list.\n    const go = dct => {\n        const\n            kvs = Object.entries(dct),\n            lists = kvs.filter(\n                ([_, v]) => Array.isArray(v)\n            ),\n            lng = lists.length;\n        return 0 < lng ? (\n            1 < lng ? (\n                Left(\n                    'Ambiguous structure :: ' +\n                    lng.toString() + (\n                        ' multiple sublists in:\\n  \"' +\n                        dct.name + (\n                            '\":\\n' + bulleted('    ')(\n                                unlines(lists.map(fst))\n                            )\n                        )\n                    )\n                )\n            ) : (() => {\n                const [nestName, xs] = lists[0];\n                return bindLR(traverseList(go)(xs))(\n                    xs => Right(\n                        Node(\n                            Object.assign(\n                                deleteKey(nestName)(\n                                    dct\n                                ), {\n                                    'List title': nestName\n                                }\n                            )\n                        )(xs)\n                    )\n                );\n            })()\n        ) : Right(Node(dct)([]));\n    };\n    return go(dict);\n};"
    }
  ]
}
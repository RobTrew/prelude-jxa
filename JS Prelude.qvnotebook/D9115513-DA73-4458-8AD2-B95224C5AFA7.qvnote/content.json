{
  "title": "zipWithGen",
  "cells": [
    {
      "type": "code",
      "language": "javascript",
      "data": "// zipWithGen :: (a -> b -> c) -> \n// Gen [a] -> Gen [b] -> Gen [c]\nconst zipWithGen = f => ga => gb => {\n    function* go(ma, mb) {\n        let\n            a = ma,\n            b = mb;\n        while (!a.Nothing && !b.Nothing) {\n            let\n                ta = a.Just,\n                tb = b.Just;\n            yield(f(fst(ta))(fst(tb)));\n            a = uncons(snd(ta));\n            b = uncons(snd(tb));\n        }\n    }\n    return go(uncons(ga), uncons(gb));\n};"
    }
  ]
}
{
  "title": "unfoldr",
  "cells": [
    {
      "type": "code",
      "language": "javascript",
      "data": "// The 'unfoldr' function is a *dual* to 'foldr': while 'foldr'\n// reduces a list to a summary value, 'unfoldr' builds a list from\n// a seed value.  The function takes the element and returns 'Nothing'\n// if it is done producing the list or returns 'Just' @(a,b)@, in which\n// case, @a@ is a prepended to the list and @b@ is used as the next\n// element in a recursive call.\n//\n// unfoldr(x => 0 !== x ? Just([x, x - 1]) : Nothing(), 10);\n// --> [10,9,8,7,6,5,4,3,2,1]\n\n// (x => Maybe [value, remainder] -> initial value -> values"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "// unfoldr :: (b -> Maybe (a, b)) -> b -> [a]\nconst unfoldr = (f, v) => {\n    let\n        xr = [v, v],\n        xs = [];\n    while (true) {\n        const mb = f(xr[1]);\n        if (mb.Nothing) {\n            return xs\n        } else {\n            xr = mb.Just;\n            xs.push(xr[0])\n        }\n    }\n};"
    }
  ]
}
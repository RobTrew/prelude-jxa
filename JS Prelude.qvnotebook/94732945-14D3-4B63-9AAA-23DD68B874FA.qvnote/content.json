{
  "title": "zipWithN",
  "cells": [
    {
      "type": "code",
      "language": "javascript",
      "data": "// zipWithN :: (a -> b -> ... -> c) -> ([a], [b] ...) -> [c]\nfunction zipWithN() {\n    const\n        args = Array.from(arguments),\n        rows = args.slice(1).map(list),\n        f = compose(uncurryN(args[0]), TupleN),\n        n = Math.min(...rows.map(x => x.length));\n    return 0 < n ? (\n        take(n))(rows[0]).map(\n        (x, i) => f(rows.flatMap(\n            x => x[i]\n        ))\n    ) : [];\n}"
    }
  ]
}
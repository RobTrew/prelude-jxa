{
  "title": "span",
  "cells": [
    {
      "type": "code",
      "language": "javascript",
      "data": "// span, applied to a predicate p and a list xs, returns a tuple of xs of \n// elements that satisfy p and second element is the remainder of the list:\n//\n// > span (< 3) [1,2,3,4,1,2,3,4] == ([1,2],[3,4,1,2,3,4])\n// > span (< 9) [1,2,3] == ([1,2,3],[])\n// > span (< 0) [1,2,3] == ([],[1,2,3])\n//\n// span p xs is equivalent to (takeWhile p xs, dropWhile p xs) "
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "// span :: (a -> Bool) -> [a] -> ([a], [a])\nconst span = p =>\n    // Longest prefix of xs consisting of elements which\n    // all satisfy p, tupled with the remainder of xs.\n    xs => {\n        const\n            ys = 'string' !== typeof xs ? (\n                list(xs)\n            ) : xs,\n            iLast = ys.length - 1;\n        return splitAt(\n            until(\n                i => iLast < i || !p(ys[i])\n            )(i => 1 + i)(0)\n        )(ys);\n    };"
    }
  ]
}
{
  "title": "parentIndexedTree",
  "cells": [
    {
      "type": "code",
      "language": "javascript",
      "data": "// parentIndexedTree :: Tree (a, {...index :: Int}) ->\n// Tree (a, {...index :: Int, parent :: Maybe Int})\nconst parentIndexedTree = tree => {\n    // A tree additionally decorated with parent indices,\n    // derived from a measured tree already decorated with\n    // node indices. (See measuredTree).\n    const go = mb => node => {\n        const\n            x = node.root,\n            measures = x[1];\n        return Node(Tuple(x[0])(\n            Object.assign(measures, {\n                parent: mb\n            })\n        ))(node.nest.map(go(Just(measures.index))));\n    };\n    return go(Nothing())(tree);\n};"
    }
  ]
}
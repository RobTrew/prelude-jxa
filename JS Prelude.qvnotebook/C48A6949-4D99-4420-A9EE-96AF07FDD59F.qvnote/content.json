{
  "title": "liftM2",
  "cells": [
    {
      "type": "code",
      "language": "javascript",
      "data": "// > liftM2 (+) [0,1] [0,2] = [0,2,1,3]\n// > liftM2 (+) (Just 1) Nothing = Nothing\n\n// Control.Monad : \n// \"Promote a function to a monad, scanning the monadic arguments \n// from left to right.\"\n\n// Add 7, 9, or 10,  to 100 or 1000\n// liftM2(plus, [7, 9, 10], [100, 1000])\n\n// --> [107, 1007, 109, 1009, 110, 1010]\n\n// liftM2 f xs ys = [f] <*> xs <*> ys"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "// liftM2 :: (a -> b -> c) -> [a] -> [b] -> [c]\nconst liftM2 = (f, a, b) =>\n    Array.isArray(a) ? (\n        ap(map((g => x => y => g(x, y))(f), a), b)\n    ) : Object.keys(a)\n    .indexOf('Nothing') !== -1 ? (\n        a.Nothing || b.Nothing ? a : pureMay(f(a.Just, b.Just))\n    ) : undefined;"
    }
  ]
}
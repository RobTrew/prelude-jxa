{
  "title": "traverse",
  "cells": [
    {
      "type": "code",
      "language": "javascript",
      "data": "// traverse :: (Applicative f, Traversable t) => (a -> f b) -> t a -> f (t b)\nconst traverse = (f, tx) => {\n    const t = tx.type;\n    return (\n        undefined !== t ? (\n            'Either' === t ? (\n                traverseLR\n            ) : 'Maybe' === t ? (\n                traverseMay\n            ) : 'Node' === t ? (\n                traverseTree\n            ) : 'Tuple' === t ? (\n                traverseTuple\n            ) : traverseList\n        ) : traverseList\n    )(f, tx)\n};"
    }
  ]
}
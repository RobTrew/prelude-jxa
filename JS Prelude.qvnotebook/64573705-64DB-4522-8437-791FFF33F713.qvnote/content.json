{
  "title": "liftA2",
  "cells": [
    {
      "type": "code",
      "language": "javascript",
      "data": "// Lift a binary function to actions.\n// liftA2 f a b = fmap f a <*> b"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "// liftA2 :: Applicative f => (a -> b -> c) -> f a -> f b -> f c\nconst liftA2 = (f, a, b) => {\n    const t = a.type;\n    return (\n        undefined !== t ? (\n            'Either' === t ? (\n                liftA2LR\n            ) : 'Maybe' === t ? (\n                liftA2May\n            ) : 'Tuple' === t ? (\n                liftA2Tuple\n            ) : 'Node' === t ? (\n                liftA2Tree\n            ) : liftA2List\n        ) : liftA2List\n    ).apply(null, [f, a, b]);\n};\n\n// const liftA2 = (f, x, y) => ap(fmap(curry(f), x), y);"
    }
  ]
}
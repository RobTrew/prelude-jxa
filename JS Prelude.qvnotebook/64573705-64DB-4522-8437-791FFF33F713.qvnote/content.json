{
  "title": "liftA2",
  "cells": [
    {
      "type": "code",
      "language": "javascript",
      "data": "// liftA2 :: Applicative f => (a -> b -> c) -> f a -> f b -> f c\nconst liftA2 = f =>\n    // Lift a binary function to actions.\n    // liftA2 f a b = fmap f a <*> b\n    a => b => {\n        const t = typeName(a);\n        return (\n            'Bottom' !== t ? (\n                '(a -> b)' === t ? (\n                    liftA2Fn\n                ) : 'Either' === t ? (\n                    liftA2LR\n                ) : 'Maybe' === t ? (\n                    liftA2May\n                ) : 'Tuple' === t ? (\n                    liftA2Tuple\n                ) : 'Node' === t ? (\n                    liftA2Tree\n                ) : liftA2List\n            ) : liftA2List\n        )(f)(a)(b);\n    };"
    }
  ]
}